<?php
/*
 *Componente para gestinar los sistemas.
 *
 * @package SIGIS
 * @copyright UCID-ERP Cuba
 * @author Oiner Gomez Baryolo    
 * @author Darien Garcï¿½a Tejo
 * @author Julio Cesar Garcï¿½a Mosquera  
 * @version 1.0-0
 */
/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class DatServidor extends BaseDatServidor
{
    public function setUp()
    {
        parent::setUp();
        $this->hasMany('DatSistemaDatServidores', array('local' => 'idservidor', 'foreign' => 'idservidor'));
        $this->hasOne('DatSerautenticacion', array('local' => 'idservidor', 'foreign' => 'idservidor'));
        $this->hasOne('DatServidorbd', array('local' => 'idservidor', 'foreign' => 'idservidor'));
        $this->hasOne('DatGestorDatServidorbd', array('local' => 'idservidor', 'foreign' => 'idservidor'));
    }

    static public function cargarservidores($limit, $start)
    {
        $q = Doctrine_Query::create();

        if (($limit != 0))
            $result = $q->select('s.idservidor id, s.denominacion text, s.tiposervidor, s.descripcion, s.ip, a.tservidor, a.basedn, a.usuario, a.clave, a.puerto, a.ssl, a.tsl')->from('DatServidor s, s.DatSerautenticacion a')->orderby('s.idservidor')->limit($limit)->offset($start)->execute();
        else
            $result = $q->select('s.idservidor id, s.denominacion text')->from('DatServidor s')->where("s.tiposervidor=?", 'bd')->orderby('s.idservidor')->execute();
        return $result;
    }

    static public function gettiposerv($idservidor)
    {
        $q = Doctrine_Query::create();
        $result = $q->select('s.tiposervidor')->from('DatServidor s')->where("s.idservidor=?", $idservidor)->execute();
        return $result;
    }

    public function cargarservidoresbdaut()
    {
        $q = Doctrine_Query::create();
        $result = $q->select('idservidor id,  denominacion text, descripcion, ip, tiposervidor, true leaf')->from('DatServidor')->orderby('idservidor')->execute();
        return $result;
    }

    static public function obtenercantserv()
    {
        $query = Doctrine_Query::create();
        $cantFndes = $query->select('count(s.idservidor) cant')->from('DatServidor s')->execute();
        return $cantFndes[0]->cant;
    }

    static function cargarcomboservidoresaut()
    {
        $query = Doctrine_Query::create();
        $result = $query->select('s.idservidor,s.denominacion')
            ->from('DatServidor s')
            ->innerjoin('s.DatSerautenticacion a ON s.idservidor = a.idservidor')
            ->execute();

        return $result;
    }

    static public function cargarcomboservidoresBD()
    {
        $query = Doctrine_Query::create();
        return $query->select('idservidor, denominacion, ip')->from('DatServidor')->where("tiposervidor = 'bd'")->execute();
    }

    static public function comprobardatosservidor($denominacion)
    {
        $query = Doctrine_Query::create();
        $cantidadserv = $query->from('DatServidor')->where("denominacion = ? ", $denominacion)->count();
        return $cantidadserv;
    }

    static public function comprobarExtisteIpTiposervidor($tipo, $ip)
    {
        $query = Doctrine_Query::create();
        $cantidadserv = $query->from('DatServidor')->where("ip = ? and tiposervidor=? ", array($ip, $tipo))->count();
        return $cantidadserv;
    }

    static function usuarioservidoraut($idsorvidor)
    {
        try {
            $query = Doctrine_Query::create();
            $resul = $query->select('s.idservidor,s.denominacion, a.usuario, a.clave, a.tservidor, a.basedn')
                ->from('DatServidor s')
                ->innerjoin('s.DatSerautenticacion a')
                ->where("s.idservidor = ?", $idsorvidor)
                ->execute();
        } catch (Doctrine_Exception $ee) {
            if (DEBUG_ERP)
                echo(__FILE__ . ' ' . __LINE__ . ' ' . $ee->getMessage());
            return false;
        }
        return $resul;
    }

    static function elimirarServidores($arrayServ)
    {
        $query = Doctrine_Query::create();
        $query->delete()->from('DatServidor')->whereIn("idservidor", $arrayServ)->execute();
    }

    static function getServerName($idsistema)
    {
        $query = Doctrine_Query::create();
        $datos = $query->select('s.denominacion text, s.idservidor id')->from('DatServidor s')->innerJoin('s.DatSistemaDatServidores ss')->where("ss.idsistema =?", $idsistema)->setHydrationMode(Doctrine :: HYDRATE_ARRAY)->execute();
        return $datos;
    }

    static function getIpServidorPorId($idservidor)
    {
        $query = Doctrine_Query::create();
        $datos = $query->select('s.ip as ip')->from('DatServidor s')->where("s.idservidor =?", $idservidor)->setHydrationMode(Doctrine :: HYDRATE_ARRAY)->execute();
        return $datos;
    }

    static function getidServidorPorIP($ipservidor)
    {
        $query = Doctrine_Query::create();
        $datos = $query->select('s.idservidor as id')->from('DatServidor s')->where("s.ip =?", $ipservidor)->execute()->toarray();
        return $datos;
    }

}
